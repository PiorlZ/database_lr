services:
  db:
    image: postgres:15
    container_name: postgres_container
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: souvenirs_db
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d souvenirs_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  airflow-webserver:
    image: apache/airflow:2.7.2-python3.10  # Обновляем на версию Python 3.10
    container_name: airflow_webserver
    depends_on:
      db:
        condition: service_healthy
      airflow-scheduler:
        condition: service_started
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://user:password@db:5432/souvenirs_db
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./requirements.txt:/requirements.txt
    ports:
      - "8090:8080"
    entrypoint:
      - /bin/bash
      - -c
      - |
        pip install -r /requirements.txt &&  # Установить зависимости
        airflow db init &&
        airflow users create \
            --username admin \
            --firstname Admin \
            --lastname Admin \
            --role Admin \
            --email admin@example.com \
            --password admin &&
        airflow webserver

    restart: always

  airflow-scheduler:
    image: apache/airflow:2.7.2-python3.10  # Обновляем на версию Python 3.10
    container_name: airflow_scheduler
    depends_on:
      db:
        condition: service_healthy
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://user:password@db:5432/souvenirs_db
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    entrypoint:
      - /bin/bash
      - -c
      - |
        airflow db init &&  # Инициализация базы данных
        airflow scheduler
    restart: always

  adminer:
    image: adminer
    container_name: adminer_container
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: db

volumes:
  db_data:
